
firebase_config = {
    "type": st.secrets['type'],
    "project_id": st.secrets['project_id'],
    "private_key_id": st.secrets['private_key_id'],
    "private_key": st.secrets['private_key'],
    "client_email": st.secrets['client_email'],
    "client_id": st.secrets['client_id'],
    "auth_uri": st.secrets['auth_uri'],
    "token_uri": st.secrets['token_uri'],
    "auth_provider_x509_cert_url": st.secrets['auth_provider_x509_cert_url'],
    "client_x509_cert_url": st.secrets['client_x509_cert_url'],
    "universe_domain": st.secrets['universe_domain']
}


from PIL import Image
import streamlit as st
import firebase_admin
from firebase_admin import credentials, storage
import base64
import io


try:
    firebase_admin.get_app()
except ValueError as e:
    # If not, initialize a new default app
    cred = credentials.Certificate(firebase_config)
    firebase_admin.initialize_app(cred, {
        'storageBucket': 'hacktx2023-c123e.appspot.com'
    })


st.title("Gallery üñºÔ∏è")

st.write("This is where you can see images generated by other users.")

# Create a search bar
search_query = st.text_input("Search for images:")

columns = st.columns(5, gap="large")



def display_images_from_firebase():
    images = []
    # Get the Firebase Storage bucket
    bucket = storage.bucket()

    # List all the blobs (files) in the bucket
    blobs = bucket.list_blobs()

    # Create a list to hold the Image objects

    # Loop through each blob
    for blob in blobs:
        # Download the blob data
        blob_name = blob.name

        blob_data = blob.download_as_text()

        # The data is expected to be in the format 'data:txt;base64,{base64_data}'
        # Split the data on the comma to separate the base64 data
        
        base64_data = blob_data.split(',')[1]
     
    

        # Decode the base64 data to bytes
        image_bytes = base64.b64decode(base64_data)

        # Create a BytesIO object from the bytes
        image_io = io.BytesIO(image_bytes)

        # Create an Image object from the BytesIO object
        image = Image.open(image_io)

        # Append the Image object to the list of images
        images.append((image, blob_name))

    # If there's a search query, filter the images based on the blob name
    if search_query and images:
        images = [(image, name) for (image, name) in images if search_query.lower() in name.lower()]

    # Display the images in a grid using Streamlit
    columns = st.columns(5, gap="large")
    for i, (image,name) in enumerate(images):
        columns[i % 5].image(image, use_column_width=True)

display_images_from_firebase()
